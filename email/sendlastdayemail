var config = require("../config");
const AWS = require("aws-sdk");
const { MongoClient } = require("mongodb");
const client = new MongoClient(config.mongodburl);
const prompt = require("prompt-sync")({sigint: true});
const SES_CONFIG = {
  accessKeyId: process.env.AWS_ACCESS_KEY_ID,
  secretAccessKey: process.env.AWS_ACCESS_KEY_SECRET,
  region: "us-east-2",
};
const AWS_SES = new AWS.SES(SES_CONFIG);

async function run () {
  try {
    await client.connect();
    const database = await client.db("invite");
    const collection = database.collection("accounts");
    const accounts = await collection.find({
      validEmail: true,
      allowEmails: true,
      rsvp: {$nin: ["no", null]}
    }).toArray();
    accounts.forEach(async account => {
      console.log(account.email);
    });
  } catch (error) {
    console.log(error);
  } finally {
    client.close();
  }

}
run();

exports.send_confirmation = async function (data) {
  if (
    !data.name ||
    !data.email ||
    !data.accountid ||
    !data.rsvp ||
    !data.guestCount
  ) {
    return false;
  }
  var accountID = data.accountid;
  var accountDetails = await accountcollection.findOne({
    _id: accountID,
  });
  if (accountDetails === null) {
    return false;
  }
  if (!accountDetails.validEmail || !accountDetails.allowEmails) return false; //don't respond to invalid emails

  let params = {
    Source: config.email.source,
    Template: config.email.confirmationTemplateName,
    Destination: {
      ToAddresses: [data.email],
    },
    ConfigurationSetName: "gradpartyset",
    TemplateData: JSON.stringify({
      name: data.name,
      rsvp: tools.capitalizeFirstLetter(data.rsvp),
      guestCount: data.guestCount==1? "1 guest": data.guestCount+" guests",
      accountid: data.accountid,
    }),
  };
  return AWS_SES.sendTemplatedEmail(params).promise();
};